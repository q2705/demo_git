
  calculateScore(execute_id) {
    let selectedTestPlanIndex = _.findIndex(this.testplan_list,{execute_id:execute_id});
    let selectedTestPlan=_.cloneDeep(this.testplan_list[selectedTestPlanIndex]);
    let q1 = 0, q2 = 0, q3 = 0, q4 = 0, q5 = 0, q6 = 0, q7 = 0, q8 = 0;
    // 1. Page Response time
    q1 = this.calculatePageResponse(selectedTestPlan);
    q2 = this.calculateAvgResponse(selectedTestPlan);
    q3 = this.calculatePasspercenetage(selectedTestPlan);
    q4 = this.calculateAchievedTPH(selectedTestPlan);
    q5 = this.calculateCPU(selectedTestPlan);
    q6 = this.calculateMemory(selectedTestPlan);
    q7 = this.calculatePageSize(selectedTestPlan);
    q8 = this.calculateDataThroughPut(selectedTestPlan);

    let score = q1 + q2 + q3 + q4 + q5 + q6 + q7 + q8;

    this.testplan_list[selectedTestPlanIndex].score = score;
   
  }

  calculatePageResponse(testplan) {
    let q1 = 0, p1 = 0, total_pages = 0, pages_below_5s = 0;
    if (testplan.all && testplan.all.response && testplan.all.response[0] && testplan.all.response[0].scenario) {
      testplan.all.response[0].scenario.forEach(scenario => {
        scenario.pageName.forEach(page => {
          total_pages++;
          if (page.average < 5) {
            pages_below_5s++;
          }
        });
      });
    }
    p1 = (pages_below_5s / total_pages) * 100;
    let s1 = 0, s2 = 0, t1 = 0, t2 = 0;
    // identify threshold
    if (p1 <= 100 && p1 > 80) {
      s1 = 10;
      s2 = 15;
      t1 = 80;
      t2 = 100;
    } else if (p1 <= 80 && p1 > 20) {
      s1 = 0;
      s2 = 10;
      t1 = 20;
      t2 = 80;
    } else if (p1 <= 20 && p1 >= 0) {
      s1 = 0;
      s2 = 0;
      t1 = 0;
      t2 = 20;
    }
    // calculate m
    let m = (s2 - s1) / (t2 - t1);
    // calculate q1;
    q1 = m * (p1 - t1) + s1;
    q1 = isNaN(q1) ? 0 : q1;
    return q1;
  }

  calculateAvgResponse(testplan) {
    let avg_res = 0;
    avg_res = testplan.avg_response_time;
    let s1 = 0, s2 = 0, t1 = 0, t2 = 0, q2 = 0;
    if (avg_res < 10) {
      q2 = 10;
    } else if (avg_res == 10) {
      q2 = 1;
    } else if (avg_res > 10) {
      q2 = 0;
    }
    return q2;
  }

  calculatePasspercenetage(testplan) {
    let p = testplan.pass_percentage;
    let s1 = 0, s2 = 0, t1 = 0, t2 = 0, q = 0;
    if (p <= 100 && p > 98) {
      s1 = 10;
      s2 = 15;
      t1 = 98;
      t2 = 100;
      // calculate m
      let m = (s2 - s1) / (t2 - t1);
      // calculate q;
      q = m * (p - t1) + s1;
    } else if (p <= 98 && p > 95) {
      s1 = 5;
      s2 = 10;
      t1 = 95;
      t2 = 98;
      // calculate m
      let m = (s2 - s1) / (t2 - t1);
      // calculate q;
      q = m * (p - t1) + s1;
    } else if (p <= 95) {
      q = 0
    }
    return q;
  }

  calculateAchievedTPH(testplan) {
    let achieved_tph = testplan.tph,
      target_tph = 50;
    let p = (achieved_tph / target_tph) * 100;
    let s1 = 0, s2 = 0, t1 = 0, t2 = 0, q = 0;
    if (p > 100) {
      q = 20;
    } else if (p <= 100 && p > 80) {
      s1 = 5;
      s2 = 20;
      t1 = 80;
      t2 = 100;
      // calculate m
      let m = (s2 - s1) / (t2 - t1);
      // calculate q;
      q = m * (p - t1) + s1;
    } else if (p < 80) {
      q = 0;
    }
    return q;
  }

  calculateDataThroughPut(testplan) {
    let bw = testplan.avgBandWidth / 1000,
      available_bw = 100;
    let p = (bw / available_bw) * 100;
    let s1 = 0, s2 = 0, t1 = 0, t2 = 0, q = 0;
    if (p <= 60) {
      q = 5;
    } else if (p < 80 && p > 60) {
      s1 = 2.5;
      s2 = 5;
      t1 = 80;
      t2 = 60;
      // calculate m
      let m = (s2 - s1) / (t2 - t1);
      // calculate q;
      q = m * (p - t1) + s1;
    } else if (p > 80) {
      q = 0;
    }
    return q;
  }

  calculateCPU(testplan) {
    let p = testplan.avgCPU;
    let s1 = 0, s2 = 0, t1 = 0, t2 = 0, q = 0;
    if (p <= 60) {
      q = 10;
    } else if (p < 90 && p > 60) {
      s1 = 1;
      s2 = 10;
      t1 = 90;
      t2 = 60;

      // calculate m
      let m = (s2 - s1) / (t2 - t1);
      // calculate q;
      q = m * (p - t1) + s1;
    } else if (p == 90) {
      q = 1;
    } else if (p > 90) {
      q = 0;
    }
    return q;
  }

  calculateMemory(testplan) {
    // avgmemory / total mmry of system
    let p = ((testplan.avgMemory / 1000) / 16) * 100;
    let s1 = 0, s2 = 0, t1 = 0, t2 = 0, q = 0;
    if (p <= 60) {
      q = 10;
    } else if (p < 90 && p > 60) {
      s1 = 1;
      s2 = 10;
      t1 = 90;
      t2 = 60;
      // calculate m
      let m = (s2 - s1) / (t2 - t1);
      // calculate q;
      q = m * (p - t1) + s1;
    } else if (p == 90) {
      q = 1;
    } else if (p > 90) {
      q = 0;
    }
    return q;
  }

  calculatePageSize(testplan) {
    let pages = testplan.pageSizeArray;
    let total_pages = 0, pages_below_50kb = 0;
    if (pages) {
      pages.forEach(page => {
        total_pages++;
        if (page[1] && (page[1].value / 1000) < 50) {
          pages_below_50kb++;
        }
      });
    }
    let p = (pages_below_50kb / total_pages) * 100;
    let s1 = 0, s2 = 0, t1 = 0, t2 = 0, q = 0;
    if (p >= 100) {
      q = 5;
    } else if (p < 100 && p > 80) {
      s1 = 2.5;
      s2 = 5;
      t1 = 80;
      t2 = 100;
      // calculate m
      let m = (s2 - s1) / (t2 - t1);
      // calculate q;
      q = m * (p - t1) + s1;
    } else if (p == 80) {
      q = 2.5;
    } else if (p < 80) {
      q = 0;
    }
    return q;
  }